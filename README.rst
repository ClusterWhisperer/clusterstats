ClusterStats Project
=====================

Objective:
----------
 To build a generic utility tool to query ‘status’ endpoint of N (1000's) servers 
 and produce a report based on data within the status page.
 
 
 Assumptions:
  - Each server has a ‘status’ endpoint that returns json data. (pattern: http://<server>/status)
    In future version the endpoint can be dynamically generated by passing a pattern argument. 

Deployment Dependency:
----------------------

- python 2.7
- pip


How to deploy the clusterstats package ?
----------------------------------------

.. code:: shell

    pip install clusterstats-0.1.tar.gz
    
pip will install the module dependencies.

 Module Dependency:
  * requests
  * pandas
  
Command Line Usage:
-------------------

.. code:: shell
  
     Usage: clusterstats -i <server_list_file> [-o output_directory] [options] [http options] [aggregation options]

       Options:
         -h, --help            show this help message and exit
         -i INVENTORY_FILE, --inventory_file=INVENTORY_FILE
                               File path with host names to query status
         -o OUTPUT_DIR, --output_dir=OUTPUT_DIR
                               Directory to store the status output (default= /tmp).
         -q QOS, --qos=QOS     Guarantee atleast x% of the server status are
                               collected to calculate statistics, otherwise
                               errors.(default 99%)
         -v, --verbose         Show error logs (default= turned off)

         Aggregation Options:
           -s, --aggr_success_rate
                               Aggregate Success count by application and version.

         HTTP Options:
           -t TIMEOUT, --timeout=TIMEOUT
                               Connection timeout.(default 1sec)
           -f THREADS, --threads=THREADS
                               Max concurrent http connections (default=1)
           -r HTTP_RETRIES, --retries=HTTP_RETRIES
                               Http Session max-retries (default=3)
    





